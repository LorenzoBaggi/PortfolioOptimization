import numpy as np
import matplotlib.pyplot as plt
from math import e

#In general, we usually assume that the stock price follows a 
#Markov stochastic process, which means only the current stock 
#price is relevant for predicting the future price, it is not
#correlated with the past price.
#Brownian motion is a particular type of Markov stochastic process

#Wiener process has independent and normally distributed 
#increments and has continuous sample path.
def wiener_process(T, N):
    """
    T: total time
    N: The total number of steps
    """
    W0 = 0
    dt = T/float(N)
    # simulate the increments by normal random variable generator
    increments = np.random.normal(0, 1*np.sqrt(dt), N)
    W = [0] + list(np.cumsum(increments))
    return W

#Next, we simulate the Wiener process and plot the paths 
#attempting to gain an intuitive understanding of a stochastic 
#process. Each path is an independent Wiener process

N=1000
T=10
dt = T/float(N)

t = np.linspace(0.0, N*dt, N+1)

for i in range(5):
    W = wiener_process(10, 1000)
    plt.plot(t, W)
    plt.xlabel('time')
    plt.ylabel('W')
    plt.grid(True)

plt.figure(figsize=(15,10))

#But Wiener process has a variance which depends on just the 
#time interval but not on the price itself. Thus it is not 
#appropriate to assume that a stock price follows a generalized
#Wiener process with constant drift rate and variance rate.

#In order to characterize the dynamics of a stock price process
#and fix this problem, we model the proportional increase 
#in the stock price by using the stochastic differential 
#equation
import quandl
quandl.ApiConfig.api_key = 'BvG_GP_A6WxW4um-Gdz-'
data = quandl.get('WIKI/GOOG')

close = data['2015-01':'2017-07']['Adj. Close']
annual_return = (close[-1]/close[1])** (365.0/len(close)) - 1
annual_vol = (close/close.shift(1)-1)[1:].std()*np.sqrt(252)

mu = annual_return
sigma = annual_vol
s0 = close[-1]
T = 3.0/12 
delta_t = 0.001
num_reps = 500
steps = T/delta_t
plt.figure(figsize=(8,5))
for j in range(num_reps):
    price_path = [s0]
    st = s0
    for i in range(int(steps)):
        st = st*e**((mu-0.5*sigma**2)*delta_t + sigma*np.sqrt(delta_t)*np.random.normal(0, 1))
        price_path.append(st)
    plt.plot(price_path)
plt.ylabel('stock price',fontsize=15)
plt.xlabel('steps',fontsize=15)


def mc_euro_options(option_type,s0,strike,maturity,r,sigma,num_reps):
    payoff_sum = 0
    for j in range(num_reps):
        st = s0
        st = st*e**((r-0.5*sigma**2)*maturity + sigma*np.sqrt(maturity)*np.random.normal(0, 1))
        if option_type == 'c':
            payoff = max(0,st-strike)
        elif option_type == 'p':
            payoff = max(0,strike-st)
        payoff_sum += payoff
    premium = (payoff_sum/float(num_reps))*(e**(-r*maturity))
    return premium 

print(mc_euro_options('c',927.96,785,100.0/252,0.01,0.23,10000))
